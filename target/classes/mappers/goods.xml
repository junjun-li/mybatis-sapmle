<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="goods">
    <!--
        开启了二级缓存
        eviction 是缓存的清除策略,当缓存对象数量达到上限后,自动触发对应算法对缓存对象清除
            1.LRU – 最近最少使用的:移除最长时间不被使用的对象。(建议使用, 常用)
            O1 O2 O3 O4 .. O512
            14 99 83 1     893
            2.FIFO – 先进先出:按对象进入缓存的顺序来移除它们。
            3.SOFT – 软引用:移除基于垃圾回收器状态和软引用规则的对象。
            4.WEAK – 弱引用:更积极地移除基于垃圾收集器状态和弱引用规则的对象。

        flushInterval 代表间隔多长时间自动清空缓存,单位毫秒,600000毫秒 = 10分钟
        size 缓存存储上限,用于保存对象或集合(1个集合算1个对象)的数量上限
        readOnly 设置为true ,代表返回只读缓存,每次从缓存取出的是缓存对象本身.这种执行效率较高
                 设置为false , 代表每次取出的是缓存对象的"副本",每一次取出的对象都是不同的,这种安全性较高
    -->
    <cache eviction="LRU" flushInterval="600000" readOnly="true" size="512" />
    <!--
        resultType: 期望从这条语句中返回结果的类全限定名或别名。(说明数据返回的对象是什么)
        useCache: list数据, 不应该使用缓存
    -->
    <select id="selectAll" resultType="com.imooc.entity.Goods" useCache="false">
        select *
        from t_goods
        order by goods_id desc
        limit 10
    </select>

    <!-- 单参数传递,使用parameterType指定参数的数据类型即可,SQL中#{value}提取参数-->
    <select id="selectById" parameterType="integer" resultType="com.imooc.entity.Goods">
        select *
        from t_goods
        where goods_id = #{value}
    </select>

    <!-- 多参数传递时,使用parameterType指定Map接口,SQL中#{key}提取参数 -->
    <select id="selectByPriceRange" parameterType="java.util.Map" resultType="com.imooc.entity.Goods">
        select *
        from t_goods
        where current_price between #{min} and #{max}
        order by current_price
        limit 0, #{pageSize}
    </select>

    <!--
        利用LinkedHashMap保存多表关联结果
        MyBatis会将每一条记录包装为LinkedHashMap对象
        key是字段名  value是字段对应的值 , 字段类型根据表结构进行自动判断
        优点: 易于扩展,易于使用
        缺点: 太过灵活,无法进行编译时检查
    -->
    <select id="selectGoodsLinkedHashMap" resultType="java.util.LinkedHashMap">
        select g.*, c.category_name
        from t_goods g,
             t_category c
        where g.category_id = c.category_id
        limit 0, 5;
    </select>

    <!--利用resultMap进行结果映射-->
    <resultMap id="rmGoods" type="com.imooc.dto.GoodsDTO">
        <!--设置主键字段与映射属性-->
        <id column="goods_id" property="goods.goodsId" />
        <!--设置非主键字段与属性映射-->
        <result column="title" property="goods.title" />
        <result column="current_price" property="goods.currentPrice" />
        <result column="category_id" property="goods.categoryId" />
        <result column="category_id" property="category.categoryId" />
        <result column="parent_id" property="category.parentId" />
        <result column="category_name" property="category.categoryName" />

        <result column="test" property="test" />
    </resultMap>
    <select id="selectGoodsDTO" resultMap="rmGoods">
        select g.*, c.*, '1' as test
        from t_goods g,
             t_category c
        where g.category_id = c.category_id
        limit 0, 5;
    </select>
    <!--利用resultMap进行结果映射-->

    <!--插入操作-->
    <!--
        selectKey和useGeneratedKeys区别
        - selectKey标签需要明确编写获取最新主键的SQL语句
        - useGeneratedKeys属性会自动根据驱动生成对应SQL语句

        应用场景的区别
        - selectKey适用于所有的关系型数据库
        - useGeneratedKeys只支持"自增主键"类型的数据库

        总结
        - selectKey是通用的解决方案,但是需要迁移数据库时增加了成本
        - useGeneratedKeys配置即可通过驱动的不同生成不同的SQL,减少了维护成本,相对简单,但只支持"自增主键"类型的数据库
    -->
    <!--flushCache="true"在sql执行后强制清空缓存-->
    <insert flushCache="true" id="insert" keyColumn="goods_id" keyProperty="goodsId" parameterType="com.imooc.entity.Goods" useGeneratedKeys="true">
        insert into t_goods(title, sub_title, original_cost, current_price, discount, is_free_delivery, category_id)
        values (#{title}, #{subTitle}, #{originalCost}, #{currentPrice}, #{discount}, #{isFreeDelivery}, #{categoryId});
        <!--<selectKey resultType="integer" keyProperty="goodsId" order="AFTER">-->
        <!--    select last_insert_id()-->
        <!--</selectKey>-->
    </insert>

    <!--update操作-->
    <update id="update" parameterType="com.imooc.entity.Goods">
        update t_goods
        set title=#{title},
            sub_title=#{subTitle},
            original_cost=#{originalCost},
            current_price=#{currentPrice},
            discount=#{discount},
            is_free_delivery=#{isFreeDelivery},
            category_id=#{categoryId}
        where goods_id = #{goodsId}
    </update>

    <!--删除操作-->
    <delete id="delete" parameterType="Integer">
        delete
        from t_goods
        where goods_id = #{value}
    </delete>

    <!--预防SQL注入, 使用#{}-->
    <!--
        ${}原文传值
        select * from t_goods
        where title = '' or 1 =1 or title = '【德国】爱他美婴幼儿配方奶粉1段800g*2罐 铂金版'

        #{}预编译
        select * from t_goods
        where title = "'' or 1 =1 or title = '【德国】爱他美婴幼儿配方奶粉1段800g*2罐 铂金版'"
    -->
    <select id="selectByTitle" parameterType="java.util.Map" resultType="com.imooc.entity.Goods">
        select *
        from t_goods
        where title = #{title}
    </select>

    <!--动态SQL技术-->
    <select id="dynamicSQL" parameterType="java.util.Map" resultType="com.imooc.entity.Goods">
        select * from t_goods
        <where>
            <if test="categoryId != null">
                and category_id=#{categoryId}
            </if>
            <if test="currentPrice != null">
                # 小于号需要进行转义
                and current_price &lt; #{currentPrice}
            </if>
        </where>
    </select>

    <resultMap id="rmGoods1" type="com.imooc.entity.Goods">
        <!--映射goods对象的主键到goods_id字段-->
        <id column="goods_id" property="goodsId" />
        <!--
            collection的含义:
                select * from t_goods limit 0, 10; 执行后,对所有Goods对象遍历得到所有的goods_id字段
                然后代入到 goodsDetail.selectByGoodsId 中进行SQL查询
                然后得到商品详情集合,赋值给 goodsDetails
        -->
        <collection column="goods_id"
                    property="goodsDetails"
                    select="goodsDetail.selectByGoodsId" />
    </resultMap>
    <select id="selectOneToMany" resultMap="rmGoods1">
        select * from t_goods limit 0, 10;
    </select>
</mapper>